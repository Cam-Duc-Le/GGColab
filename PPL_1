{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"PPL_1","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPLhBG+12xQ+osnPtr18nLY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import math\n","def area(r):\n","  return r*r*math.pi"],"metadata":{"id":"ZbHqYDuqw_Xf"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I4kyV6Byw5O1","executionInfo":{"status":"ok","timestamp":1641361569196,"user_tz":-420,"elapsed":354,"user":{"displayName":"Cầm Lê Đức","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17152391132836560607"}},"outputId":"ad7c0ce3-c553-4b3b-8797-1d69c55af91e"},"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}],"source":["res = area(1.1)\n","expect = 3.8013271108436504\n","delta = 0.000000001\n","print((res > expect - delta) and (res < expect + delta))"]},{"cell_type":"code","source":["def check(lst,n):\n","  for i in lst:\n","    if i <= n:\n","      return False\n","  return True\n","\n","print(check([21,12,5,8],3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ot-PlKMzxtvT","executionInfo":{"status":"ok","timestamp":1641361813927,"user_tz":-420,"elapsed":289,"user":{"displayName":"Cầm Lê Đức","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17152391132836560607"}},"outputId":"c09f203c-0c13-4d1c-ad2d-26a6ed3e44d4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}]},{"cell_type":"code","source":["def gcd(a,b):\n","  while(a!=b):\n","    if a > b:\n","      a-=b\n","    elif b > a:\n","      b-=a\n","    else: break\n","  return a\n","\n","print(gcd(24,36))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n3hMCwKdyepJ","executionInfo":{"status":"ok","timestamp":1641362005745,"user_tz":-420,"elapsed":303,"user":{"displayName":"Cầm Lê Đức","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17152391132836560607"}},"outputId":"31f03abe-ed9e-4792-c382-8d0737891838"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["12\n"]}]},{"cell_type":"code","source":["value = input()\n","lst = value.split(\",\")\n","tup = tuple(lst)\n","print(lst)\n","print(tup)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YHq4Yek0zOlB","executionInfo":{"status":"ok","timestamp":1641362283089,"user_tz":-420,"elapsed":6867,"user":{"displayName":"Cầm Lê Đức","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17152391132836560607"}},"outputId":"55ca37ac-bf23-4967-c79a-8150d955b97b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1,2,3,55,6,543,23.4\n","['1', '2', '3', '55', '6', '543', '23.4']\n","('1', '2', '3', '55', '6', '543', '23.4')\n"]}]},{"cell_type":"code","source":["def product(l):\n","  if len(l) == 0:\n","    return 0\n","  p = 1\n","  for i in l:\n","    p*=i\n","  return p\n","  \n","print(product([3,4,7,11]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HLwKg_0a0Xhl","executionInfo":{"status":"ok","timestamp":1641362423912,"user_tz":-420,"elapsed":301,"user":{"displayName":"Cầm Lê Đức","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17152391132836560607"}},"outputId":"e2ab52ae-e40f-4db1-9975-f3615bd0370e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["924\n"]}]},{"cell_type":"code","source":["def sum_of_cube(n):\n","  i=1\n","  res = 0\n","  while i < n:\n","    res+=i*i*i\n","    i+=1\n","  return res\n","\n","print(sum_of_cube(8))\n","print(sum_of_cube(1))\n","print(sum_of_cube(2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0BGxBlvx02fB","executionInfo":{"status":"ok","timestamp":1641362644570,"user_tz":-420,"elapsed":354,"user":{"displayName":"Cầm Lê Đức","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17152391132836560607"}},"outputId":"a6bfcca4-64bb-485f-e62d-5da7ca3a1500"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["784\n","0\n","1\n"]}]},{"cell_type":"code","source":["from abc import ABC\n","\n","class Exp(ABC): pass\n","class Visitor(ABC): pass\n","\n","class Eval(Visitor):\n","    def visit(self, e: Exp):\n","        return(e.eval())\n","    \n","class PrintPrefix(Visitor):\n","    def visit(self, e: Exp):\n","        return(e.printPrefix())\n","        \n","class PrintPostfix(Visitor):\n","    def visit(self, e: Exp):\n","        return(e.printPostfix())\n","    \n","class BinExp(Exp):\n","    def __init__(self, operand1, operator, operand2):\n","        self.operator = operator\n","        if type(operand1) is int:\n","            self.operand1 = IntLit(operand1)\n","        elif type(operand1) is float:\n","            self.operand1 = FloatLit(operand1)\n","        else:\n","            self.operand1 = operand1\n","            \n","        if type(operand2) is int:\n","            self.operand2 = IntLit(operand2)\n","        elif type(operand2) is float:\n","            self.operand2 = FloatLit(operand2)\n","        else:\n","            self.operand2 = operand2\n","                \n","    def eval(self):\n","        if (self.operator == \"+\"):\n","            return self.operand1.eval() + self.operand2.eval()\n","        elif (self.operator == \"-\"):\n","            return self.operand1.eval() - self.operand2.eval()\n","        elif (self.operator == \"*\"):\n","            return self.operand1.eval() * self.operand2.eval()\n","        elif(self.operator == \"/\"):\n","            return self.operand1.eval() / self.operand2.eval()\n","            \n","    def printPrefix(self):\n","        return f\"{self.operator} {self.operand1.printPrefix()} {self.operand2.printPrefix()}\"\n","    def printPostfix(self):\n","        return f'{self.operand1.printPostfix()} {self.operand2.printPostfix()} {self.operator}'\n","    def accept(self, v: Visitor):\n","        return v.visit(self)\n","\n","class UnExp(Exp):\n","    def __init__(self, operator, operand):\n","        self.operator = operator\n","        if type(operand) is int:\n","            self.operand = IntLit(operand)\n","        elif type(operand) is float:\n","            self.operand = FloatLit(operand)\n","        else:\n","            self.operand = operand\n","            \n","    def eval(self):\n","        if (self.operator == \"-\"):\n","            return -self.operand.eval()\n","            \n","    def printPrefix(self):\n","        return f\"{self.operator}. {self.operand.printPrefix()}\"\n","    \n","    def printPostfix(self):\n","        return f\"{self.operand.printPostfix()} {self.operator}.\"\n","    def accept(self, v: Visitor):\n","        return v.visit(self)   \n","    \n","class IntLit(Exp):\n","    def __init__(self, i):\n","        self.i = i\n","    def eval(self):\n","        return self.i\n","    def printPrefix(self):\n","        return self.i\n","    def printPostfix(self):\n","        return self.i\n","    def accept(self, v: Visitor):\n","        return v.visit(self)\n","    \n","class FloatLit(Exp):\n","    def __init__(self, f):\n","        self.f = f\n","    def eval(self):\n","        return self.f\n","    def printPrefix(self):\n","        return self.f\n","    def printPostfix(self):\n","        return self.f\n","    def accept(self, v: Visitor):\n","        return v.visit(self)"],"metadata":{"id":"euJjowxP7IbI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x1 = IntLit(2)\n","x2 = BinExp(IntLit(5),\"+\",FloatLit(3.2))\n","x3 = BinExp(x1,\"*\",UnExp(\"-\",2))\n","x4 = BinExp(x2,\"+\",BinExp(x1,\"*\",UnExp(\"-\",2)))\n","print(x4.eval())\n","x4.printPrefix()"],"metadata":{"id":"9C5iTmtoKjZc","colab":{"base_uri":"https://localhost:8080/","height":53},"executionInfo":{"status":"ok","timestamp":1644334673712,"user_tz":-420,"elapsed":453,"user":{"displayName":"Cầm Lê Đức","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17152391132836560607"}},"outputId":"2235533d-5787-4c9d-8e00-0007baeea85a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4.199999999999999\n"]},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'+ + 5 3.2 * 2 -. 2'"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":[" ############# FP tut ################## \n","from functools import reduce\n","import math\n","\n","x = lambda a, b: a * b\n","def f(x):\n","\treturn lambda y:math.log(y,x)\n","log2 = f(2)\n","print(log2(8))\n","\n","lst = [3,4.0,'a',5,5.0,'b',['a','c']]\n","lstlist = list(reduce( lambda x,y:y,lst))\n","print(lstlist)\n","\n","def total(*lst):\n","  return reduce(lambda x,y:x+1,lst,0)\n","\n","l =[123,1]\n","print(total(1,2,3,4,5,lst))\n","\n","def lstSquare1(n) :\n","  if n <= 0: return []\n","  else: return lstSquare1(n-1) + [n**2]\n","\n","def lstSquare2(n) :\n","\treturn list(map(lambda x : (x+1)**2, range(n)))\n","\n","def pow2(x, n):\n","\treturn reduce(lambda a,ite : a*x, range(n), 1)\n","\n","\n","print(lstSquare2(5))\n","print(pow2(5,2))\n","\n","def append1(a, b):\n","\tif (len(a) ==0): return b\n","\telse: return list(a[0]) + append1( a[1:],b)\n","\n","## Programming code \n","\n","def dist1(lst,n): \n","    return list(map(lambda x: (x,n),lst))\n","\n","def dist2(lst,n):\n","  if len(lst)==0:return []\n","  else: return [(lst[0],n)]+dist2(lst[1:],n) \n","\n","print(dist2([1,2,3],4))\n","\n","def lessThan1(lst,n):\n","  if len(lst) == 0: return []\n","  else: \n","    if lst[0]<n: return [lst[0]]+lessThan1(lst[1:],n)\n","    else: return lessThan1(lst[1:],n)\n","\n","def lessThan2(lst,n):\n","  return [x for x in lst if x < n]\n","\n","print(lessThan2([1,2,3,4,5],4))\n","\n","\n","def flatten1(lst) : \n","    return [i for x in lst for i in x ]\n","\n","def flatten2(lst) : \n","    return list(reduce(lambda x,y:x + y,lst,[]))\n","\n","print(flatten2([[1,2,3],[4,5],[6,7]]))\n","\n","def lstSquare1(n):\n","  return [(x+1)**2 for x in range(n)]\n","\n","def lstSquare2(n):\n","  return list(reduce(lambda x,y:x+[(y+1)**2] ,range(n),[]))\n","\n","print( lstSquare2(3))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bXUP768IChXT","executionInfo":{"status":"ok","timestamp":1644916412765,"user_tz":-420,"elapsed":726,"user":{"displayName":"Cầm Lê Đức","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17152391132836560607"}},"outputId":"d608ed41-531e-4ca6-a9a6-b9634b3c9bdf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3.0\n","['a', 'c']\n","6\n","[1, 4, 9, 16, 25]\n","25\n","[(1, 4), (2, 4), (3, 4)]\n","[1, 2, 3]\n","[1, 2, 3, 4, 5, 6, 7]\n","[1, 4, 9]\n"]}]},{"cell_type":"code","source":["def dist2(lst,n):\n","  return list(reduce(lambda x,y:x+[(y,n)],lst,[]))\n","\n","def lstSquare(n):\n","  return list(reduce(lambda x,y:x+[(y+1)**2] ,range(n),[]))\n","\n","\n","\n","print(dist2([1,2,3],4))\n","print(lstSquare(3))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IqT4CjQG8Je7","executionInfo":{"status":"ok","timestamp":1647941981181,"user_tz":-420,"elapsed":380,"user":{"displayName":"Cầm Lê Đức","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17152391132836560607"}},"outputId":"a7de7cd2-f0e9-437c-b5dd-2932140f8462"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[(1, 4), (2, 4), (3, 4)]\n","[1, 4, 9]\n"]}]},{"cell_type":"code","source":["def compose(fun1,fun2,*funs):\n","  def compose_func(f,g): \n","      return lambda x : g(f(x))\n","  lst = [fun1,fun2,*funs]\n","  return reduce(compose_func,reversed(lst),lambda x:x)\n","  \n","\n","def square(x):\n","  return x**2\n","def increase(x):\n","  return x+1\n","def double(x):\n","  return x*2\n","\n","f = compose(increase,square)\n","print(f(3)) #increase(square(3)) = 10\n","f = compose(increase,square,double)\n","print(f(3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qJ1iu32Qp8BM","executionInfo":{"status":"ok","timestamp":1647942227586,"user_tz":-420,"elapsed":3,"user":{"displayName":"Cầm Lê Đức","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17152391132836560607"}},"outputId":"28e20be0-42c9-41c1-9086-ef9cb860cac4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","37\n"]}]},{"cell_type":"code","source":["### review\n","\n","def makelist(num):\n","  if(num<10):\n","    return [num]\n","  tmp = 0\n","  i=1\n","  while num>=10:\n","    tmp+=i*(num%10)\n","    i*=10\n","    num//=10\n","  return [num] +makelist(tmp)\n","print(makelist(142))\n","\n","from functools import reduce\n","def getSubSum(num): # [1,4,2] => [1,5,7]\n","  return reduce(lambda x,y:x+[y+x[-1]] if len(x)>=1 else [y] ,makelist(num),[])\n","print(getSubSum(142))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wPKUTcisGtKM","executionInfo":{"status":"ok","timestamp":1648483524235,"user_tz":-420,"elapsed":2,"user":{"displayName":"Cầm Lê Đức","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17152391132836560607"}},"outputId":"2bd6ce87-d64c-426f-f414-c1ca6ce61ed3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 4, 2]\n","[1, 5, 7]\n","hello\n"]}]},{"cell_type":"code","source":["arr =[1,2,3,4,5,6,7]\n","print(arr[::-1])\n","print(arr)\n","print(arr.reverse())\n","print(arr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0yJVU4WJ6EjC","executionInfo":{"status":"ok","timestamp":1649685509169,"user_tz":-420,"elapsed":333,"user":{"displayName":"Cầm Lê Đức","userId":"17152391132836560607"}},"outputId":"2f63f541-d013-49c2-8142-95ce1ff865d8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[7, 6, 5, 4, 3, 2, 1]\n","[1, 2, 3, 4, 5, 6, 7]\n","None\n","[7, 6, 5, 4, 3, 2, 1]\n"]}]},{"cell_type":"code","source":["idList = ['a','b','c','d','e']\n","myDict = dict(map(lambda x: (x, \"\"), idList))\n","print(myDict)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n8ZC7gT-G-CY","executionInfo":{"status":"ok","timestamp":1650426952285,"user_tz":-420,"elapsed":8,"user":{"displayName":"Cầm Lê Đức","userId":"17152391132836560607"}},"outputId":"a58a34f8-517f-47b0-f980-9b2448f9e903"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["{'a': '', 'b': '', 'c': '', 'd': '', 'e': ''}\n"]}]}]}