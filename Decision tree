{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Decision tree","provenance":[],"authorship_tag":"ABX9TyNTynydsDtuMLnhqE1hpK9Y"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4NbfLZHU6PM-","executionInfo":{"status":"ok","timestamp":1644401508837,"user_tz":-420,"elapsed":478,"user":{"displayName":"Cầm Lê Đức","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17152391132836560607"}},"outputId":"49024240-18a2-41c1-a061-8611aba69f70"},"outputs":[{"output_type":"stream","name":"stdout","text":["(569, 30)\n","(569,)\n","(569, 1)\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[1.799e+01, 1.038e+01, 1.228e+02, 1.001e+03, 1.184e-01, 0.000e+00],\n","       [2.057e+01, 1.777e+01, 1.329e+02, 1.326e+03, 8.474e-02, 0.000e+00],\n","       [1.969e+01, 2.125e+01, 1.300e+02, 1.203e+03, 1.096e-01, 0.000e+00],\n","       ...,\n","       [1.660e+01, 2.808e+01, 1.083e+02, 8.581e+02, 8.455e-02, 0.000e+00],\n","       [2.060e+01, 2.933e+01, 1.401e+02, 1.265e+03, 1.178e-01, 0.000e+00],\n","       [7.760e+00, 2.454e+01, 4.792e+01, 1.810e+02, 5.263e-02, 1.000e+00]])"]},"metadata":{},"execution_count":14}],"source":["import numpy as np\n","from sklearn.datasets import load_breast_cancer\n","data = load_breast_cancer()\n","\n","\n","X=data['data']\n","Y=data['target']\n","print(X.shape)\n","print(Y.shape)\n","#Y=np.reshape(Y,(Y.shape[0],1))\n","Y=np.reshape(Y,(-1,1))\n","print(Y.shape)\n","X=X[:,:5]\n","X=np.append(X,Y,axis=1)\n","X"]},{"cell_type":"code","source":["class D_TREE :\n","    \n","    def fit(self,Xin):\n","        #fitting the values\n","        self.X=Xin                            #training_dataset_\n","        self.my_tree=self.tree(Xin)           #calls tree() function to create a tree based on the dataset provided\n","    \n","    \n","    \n","    def label_count(self,t):\n","        #count the unique labels\n","        count = {}                           #a dictionary that will store the no of times every label has occurred\n","        for i in range(len(t)):\n","            lbl = t[i][-1]                   #The last field or column in t actually contains the labels \n","            if lbl not in count:\n","                count[lbl] = 0               #If the label is not present previously,initialize it with zero\n","            count[lbl]+=1                    #Everytime a particular label is encountered its count is increased by 1           \n","        return count\n","\n","    \n","    \n","    \n","    class Question :\n","        #stores the question and matches the question \n","        def __init__(self,col,value):\n","            self.col = col                  #The column to which the question belongs to\n","            self.question = value           #the particualr cell in the column which is treated as question\n","        \n","        \n","        def is_digit_or_char(self,n):\n","            #checks whether a particular value is a number or not\n","            return isinstance(n,int) or isinstance(n,float)\n","    \n","        def check(self,row):\n","            value=row[self.col]              #the value to be tested with the question\n","            if(self.is_digit_or_char(self.question)):\n","                return value >= self.question  #if the value is numeric in nature check whether it is greater or equal to question   ??????\n","            else :\n","                return value == self.question  #if the value is a character or string check whether it is equal to the question or not\n","         \n","      \n","    def gini(self,t):\n","        #Calculates the gini score\n","        label = np.unique(t)                #No of unique labels\n","        impurity = 1\n","        for i in range(len(label)):\n","            impurity -= (np.sum(t[:,-1]==label[i])/t.shape[0])**2    #formula for calculating impurity based on probability\n","    \n","        return impurity\n","\n","\n","    def information_gain(self,l,r,current_uncertainity):\n","        #Information gain is calculated\n","        p = len (l) / float ( len(l) + len(r) )             \n","        return current_uncertainity - p*self.gini(l) - (1-p)*self.gini(r)\n","    \n","    \n","    \n","    \n","    def best_split(self,t):\n","        #Selects the best question and split based on the gini score\n","      maxm=0\n","      best_question = None\n","      tr_row=[]\n","      fl_row=[]\n","            \n","      for i in range(t.shape[1]-1):\n","          y=np.unique(t[:,i])                         #no of unique labels in a particular column\n","          m=y.shape[0]                                #no of examples\n","          for j in range(m):\n","              question = self.Question(i,y[j])        #each unique label is considered a question one at a time\n","              tr_row , fl_row = self.split(t,question)#splits the rows based on the question\n","              if(len(fl_row)==0 or len(tr_row)==0):       \n","                continue                            #if any of the branch has zero rows,the question is skipped\n","  \n","              info_gain= self.information_gain(tr_row,fl_row,self.gini(t))  #information gain is calculated\n","              if(info_gain >= maxm): #  \"\"\"best question with maximum informaion gain is selected\"\"\"\n","                maxm = info_gain                 \n","                best_question = question\n","      return maxm,best_question\n","\n","    \n","    \n","   \n","    def split(self,t,question):\n","    #Splits the dataset based on the best question\n","      tr_row=[]       \n","      fl_row=[]\n","      for k in range(t.shape[0]):\n","            \"\"\"checks every row of the dataset \n","               with the queston & if it matches,\n","               it is appended to the true rows\n","               else to the false rows\"\"\"\n","            if question.check(t[k]):\n","                tr_row=np.append(tr_row,t[k])   \n","            else:\n","                fl_row=np.append(fl_row,t[k])\n","                    \n","      tr_row = np.reshape(tr_row,(len(tr_row)//t.shape[1],t.shape[1]))   #just reshapes the one-d matrix into a readable 2d matrix\n","      fl_row = np.reshape(fl_row,(len(fl_row)//t.shape[1],t.shape[1]))   #just reshapes the one-d matrix into a readable 2d matrix\n","      return tr_row,fl_row\n","    \n","    \n","    \n","    \n","    class Decision_Node:\n","        #Stores the different question,true branch and false branch for all parts of the tree\n","        def __init__(self,question,true_branch,false_branch):\n","            self.question = question                        \n","            self.true_branch = true_branch\n","            self.false_branch = false_branch\n","\n","\n","            \n","            \n","    class Leaf:\n","        #the terminal of a tree is the leaf\n","        def __init__(self,t):\n","            self.predictions = D_TREE().label_count(t)    \n","\n","            \n","            \n","    def tree(self,t):\n","        \"\"\"the most important part of the entire algorithm\n","        this is where the tree is constructed from the root \n","        to the leaves\"\"\"\n","        gain,question = self.best_split(t)                #best question with maximum gain is selected\n","        if(gain==0):\n","            return self.Leaf(t)                           #no gain indicates that leaf is reached\n","        \n","        \"\"\"if the control has reached this far,it means\n","        there is useful gain and teh datset can be subdivided\n","        or branched into true rows and false rows\"\"\"\n","        true_rows , false_rows = self.split(t,question)    \n","        true_node = self.tree(true_rows)                  #A recursion is carried out till all the true rows are found out\n","        false_node= self.tree(false_rows)                 #after true rows,the false rows are assigned to the node in a reverse fashion\n","                                                            \n","        return self.Decision_Node(question,true_node,false_node)  \n","    \n","    \n","    def check_testing_data(self,test,node):\n","        #checks the testing data by recursively calling itself\n","        if isinstance(node,self.Leaf):\n","            return node.predictions        #when the leaf is reached prediction is made\n","        \n","        \"\"\"a row is made to travel in the tree,till it reaches a leaf,\n","           it is checked with all decision nodes, and accordingly\n","           it travels along true branch or false branch,till\n","           it reaches a leaf\"\"\"\n","        if(node.question.check(test)):\n","            return self.check_testing_data(test,node.true_branch)\n","        else:\n","            return self.check_testing_data(test,node.false_branch)\n","\n","    \n","    def print_leaf(self,LEAF):\n","        #prints a leaf\n","        p={}\n","        for i in LEAF.keys():\n","            p[i] = str(100*LEAF[i]/float(sum(LEAF.values()))) + \"%\"\n","        \n","        print(p)\n","        \n","\n","    def pred(self,X_test):\n","        #predicts values for test data\n","        y_pred=[0]*X_test.shape[0]\n","        for i in range(X_test.shape[0]):\n","            \"\"\"when a row reaches a particular leaf\n","               it is assigned the label which\n","               appears maximum in the leaf\"\"\"\n","            r= self.check_testing_data(X_test[i],self.my_tree)      #deals with one row at a time\n","            y_pred[i] = max(r.keys(), key=(lambda k: r[k]))         \n","        return y_pred\n","    \n","\n","    def accuracy(self,y_test,y_pred):\n","        #Calculate the accuracy of the model\n","        return np.mean(y_test==y_pred)*100\n","    "],"metadata":{"id":"9Wi6ye5E81k5","executionInfo":{"status":"ok","timestamp":1644402070258,"user_tz":-420,"elapsed":5,"user":{"displayName":"Cầm Lê Đức","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17152391132836560607"}}},"execution_count":17,"outputs":[]}]}